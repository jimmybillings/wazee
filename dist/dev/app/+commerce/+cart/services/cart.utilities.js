"use strict";
var CartUtilities = (function () {
    function CartUtilities() {
    }
    CartUtilities.nextNewProjectNameGiven = function (existingNames) {
        var prefix = 'Project ';
        var existingLetterCodes = existingNames
            .filter(function (name) { return name.indexOf(prefix) === 0; })
            .map(function (name) { return name.replace(prefix, ''); });
        var latestLetterCode = this.latestLetterCodeFrom(existingLetterCodes);
        var newLetterCode;
        var nextNumber = existingNames.length;
        do {
            newLetterCode = this.letterCodeFor(nextNumber);
            nextNumber += 1;
        } while (!this.isUsableLetterCode(newLetterCode, latestLetterCode, existingLetterCodes));
        return "" + prefix + newLetterCode;
    };
    CartUtilities.latestLetterCodeFrom = function (existingLetterCodes) {
        var _this = this;
        return existingLetterCodes.reduce(function (previous, current) {
            return _this.compareLetterCodes(previous, current) > 0 ? previous : current;
        }, '');
    };
    CartUtilities.isUsableLetterCode = function (proposedCode, latestCode, existingCodes) {
        return (this.compareLetterCodes(proposedCode, latestCode) > 0) && existingCodes.indexOf(proposedCode) === -1;
    };
    CartUtilities.compareLetterCodes = function (a, b) {
        if (a === b)
            return 0;
        if (a.length === b.length)
            return a < b ? -1 : 1;
        return (a.length < b.length) ? -1 : 1;
    };
    CartUtilities.letterCodeFor = function (n) {
        var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
        var result = '';
        while (n >= 0) {
            result = "" + alphabet[n % 26] + result;
            n = Math.floor(n / 26) - 1;
        }
        return result;
    };
    return CartUtilities;
}());
exports.CartUtilities = CartUtilities;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC8rY29tbWVyY2UvK2NhcnQvc2VydmljZXMvY2FydC51dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBQUE7SUFrREEsQ0FBQztJQWpEZSxxQ0FBdUIsR0FBckMsVUFBc0MsYUFBNEI7UUFDaEUsSUFBTSxNQUFNLEdBQVcsVUFBVSxDQUFDO1FBQ2xDLElBQU0sbUJBQW1CLEdBQWtCLGFBQWE7YUFDYixNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQzthQUMxQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO1FBQ2pGLElBQU0sZ0JBQWdCLEdBQVcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDaEYsSUFBSSxhQUFxQixDQUFDO1FBQzFCLElBQUksVUFBVSxHQUFXLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFFOUMsR0FBRyxDQUFDO1lBQ0YsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0MsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUNsQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDLEVBQUU7UUFFekYsTUFBTSxDQUFDLEtBQUcsTUFBTSxHQUFHLGFBQWUsQ0FBQztJQUNyQyxDQUFDO0lBRWEsa0NBQW9CLEdBQWxDLFVBQW1DLG1CQUFrQztRQUFyRSxpQkFJQztRQUhDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFnQixFQUFFLE9BQWU7WUFDbEUsTUFBTSxDQUFDLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDN0UsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVhLGdDQUFrQixHQUFoQyxVQUFpQyxZQUFvQixFQUFFLFVBQWtCLEVBQUUsYUFBNEI7UUFDckcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQy9HLENBQUM7SUFHYSxnQ0FBa0IsR0FBaEMsVUFBaUMsQ0FBUyxFQUFFLENBQVM7UUFDbkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBTWEsMkJBQWEsR0FBM0IsVUFBNEIsQ0FBUztRQUNuQyxJQUFJLFFBQVEsR0FBa0IsNEJBQTRCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLElBQUksTUFBTSxHQUFXLEVBQUUsQ0FBQztRQUV4QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNaLE1BQU0sR0FBRyxLQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsTUFBUSxDQUFDO1lBQ3hDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FsREEsQUFrREMsSUFBQTtBQWxEWSxxQkFBYSxnQkFrRHpCLENBQUEiLCJmaWxlIjoiYXBwLytjb21tZXJjZS8rY2FydC9zZXJ2aWNlcy9jYXJ0LnV0aWxpdGllcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDYXJ0VXRpbGl0aWVzIHtcbiAgcHVibGljIHN0YXRpYyBuZXh0TmV3UHJvamVjdE5hbWVHaXZlbihleGlzdGluZ05hbWVzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgY29uc3QgcHJlZml4OiBzdHJpbmcgPSAnUHJvamVjdCAnO1xuICAgIGNvbnN0IGV4aXN0aW5nTGV0dGVyQ29kZXM6IEFycmF5PHN0cmluZz4gPSBleGlzdGluZ05hbWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihuYW1lID0+IG5hbWUuaW5kZXhPZihwcmVmaXgpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAobmFtZSA9PiBuYW1lLnJlcGxhY2UocHJlZml4LCAnJykpO1xuICAgIGNvbnN0IGxhdGVzdExldHRlckNvZGU6IHN0cmluZyA9IHRoaXMubGF0ZXN0TGV0dGVyQ29kZUZyb20oZXhpc3RpbmdMZXR0ZXJDb2Rlcyk7XG4gICAgbGV0IG5ld0xldHRlckNvZGU6IHN0cmluZztcbiAgICBsZXQgbmV4dE51bWJlcjogbnVtYmVyID0gZXhpc3RpbmdOYW1lcy5sZW5ndGg7XG5cbiAgICBkbyB7XG4gICAgICBuZXdMZXR0ZXJDb2RlID0gdGhpcy5sZXR0ZXJDb2RlRm9yKG5leHROdW1iZXIpO1xuICAgICAgbmV4dE51bWJlciArPSAxO1xuICAgIH0gd2hpbGUgKCF0aGlzLmlzVXNhYmxlTGV0dGVyQ29kZShuZXdMZXR0ZXJDb2RlLCBsYXRlc3RMZXR0ZXJDb2RlLCBleGlzdGluZ0xldHRlckNvZGVzKSk7XG5cbiAgICByZXR1cm4gYCR7cHJlZml4fSR7bmV3TGV0dGVyQ29kZX1gO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBsYXRlc3RMZXR0ZXJDb2RlRnJvbShleGlzdGluZ0xldHRlckNvZGVzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nTGV0dGVyQ29kZXMucmVkdWNlKChwcmV2aW91czogc3RyaW5nLCBjdXJyZW50OiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVMZXR0ZXJDb2RlcyhwcmV2aW91cywgY3VycmVudCkgPiAwID8gcHJldmlvdXMgOiBjdXJyZW50O1xuICAgIH0sICcnKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNVc2FibGVMZXR0ZXJDb2RlKHByb3Bvc2VkQ29kZTogc3RyaW5nLCBsYXRlc3RDb2RlOiBzdHJpbmcsIGV4aXN0aW5nQ29kZXM6IEFycmF5PHN0cmluZz4pIHtcbiAgICByZXR1cm4gKHRoaXMuY29tcGFyZUxldHRlckNvZGVzKHByb3Bvc2VkQ29kZSwgbGF0ZXN0Q29kZSkgPiAwKSAmJiBleGlzdGluZ0NvZGVzLmluZGV4T2YocHJvcG9zZWRDb2RlKSA9PT0gLTE7XG4gIH1cblxuICAvLyBTdGFuZGFyZCBKYXZhLXN0eWxlIGNvbXBhcmF0b3I6IHJldHVybnMgKC0xLCAwLCAxKSByZXNwZWN0aXZlbHkgaWYgKGEgPCBiLCBhID09PSBiLCBhID4gYikuXG4gIHB1YmxpYyBzdGF0aWMgY29tcGFyZUxldHRlckNvZGVzKGE6IHN0cmluZywgYjogc3RyaW5nKSB7XG4gICAgaWYgKGEgPT09IGIpIHJldHVybiAwO1xuICAgIGlmIChhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHJldHVybiBhIDwgYiA/IC0xIDogMTtcbiAgICByZXR1cm4gKGEubGVuZ3RoIDwgYi5sZW5ndGgpID8gLTEgOiAxO1xuICB9XG5cbiAgLy8gR2l2ZW4gYW4gaW50ZWdlciwgcmV0dXJucyBhIEV4Y2VsLWNvbHVtbi1saWtlIGxldHRlcmVkIHJlcHJlc2VudGF0aW9uLlxuICAvLyBFeGFtcGxlczpcbiAgLy8gICBJbnB1dHM6ICAwLCAxLCAyLCAuLi4gMjUsIDI2LCAyNywgMjgsIC4uLiA1MSwgNTIsIDUzLCA1NCwgLi4uIDY3NSwgNjc2LCA2NzcsIC4uLlxuICAvLyAgIE91dHB1dHM6IEEsIEIsIEMsIC4uLiAgWiwgQUEsIEFCLCBBQywgLi4uIEFaLCBCQSwgQkIsIEJDLCAuLi4gIFpaLCBBQUEsIEFBQiwgLi4uXG4gIHB1YmxpYyBzdGF0aWMgbGV0dGVyQ29kZUZvcihuOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBhbHBoYWJldDogQXJyYXk8c3RyaW5nPiA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicuc3BsaXQoJycpO1xuICAgIGxldCByZXN1bHQ6IHN0cmluZyA9ICcnO1xuXG4gICAgd2hpbGUgKG4gPj0gMCkge1xuICAgICAgICByZXN1bHQgPSBgJHthbHBoYWJldFtuICUgMjZdfSR7cmVzdWx0fWA7XG4gICAgICAgIG4gPSBNYXRoLmZsb29yKG4gLyAyNikgLSAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==
