"use strict";
var DateRange = (function () {
    function DateRange() {
        this.start = null;
        this.end = null;
        this.beginningOfTime = '1000-01-01';
        this.endOfTime = '3000-01-01';
        this.delimiter = ' - ';
    }
    DateRange.prototype.get = function (key) {
        switch (key) {
            case 'start': return this.start;
            case 'end': return this.end;
            default: throw new TypeError("Invalid date range key '" + key + "'");
        }
    };
    DateRange.prototype.set = function (key, value) {
        if (value.indexOf(this.delimiter) !== -1) {
            var _a = value.split(this.delimiter), start = _a[0], end = _a[1];
            this.set(key, key === 'start' ? start : end);
            return;
        }
        switch (key) {
            case 'start':
                this.start =
                    value === this.beginningOfTime ? null : this.format(value);
                break;
            case 'end':
                this.end =
                    value === this.endOfTime ? null : this.format(value);
                break;
            default:
                throw new TypeError("Invalid date range key '" + key + "'");
        }
    };
    DateRange.prototype.toString = function () {
        var start = this.start ? this.format(this.start) : this.beginningOfTime;
        var end = this.end ? this.format(this.end) : this.endOfTime;
        return "" + start + this.delimiter + end;
    };
    DateRange.prototype.toHumanString = function () {
        if (this.start && this.end) {
            return this.toString();
        }
        if (!this.start && !this.end) {
            return 'Any date';
        }
        if (!this.start) {
            return "On or before " + this.format(this.end);
        }
        return "On or after " + this.format(this.start);
    };
    DateRange.prototype.format = function (date) {
        return new Date(date).toJSON().slice(0, 10);
    };
    return DateRange;
}());
exports.DateRange = DateRange;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvdXRpbGl0aWVzL2RhdGVSYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUE7SUFBQTtRQUNTLFVBQUssR0FBVyxJQUFJLENBQUM7UUFDckIsUUFBRyxHQUFXLElBQUksQ0FBQztRQUVULG9CQUFlLEdBQVcsWUFBWSxDQUFDO1FBQ3ZDLGNBQVMsR0FBVyxZQUFZLENBQUM7UUFDakMsY0FBUyxHQUFXLEtBQUssQ0FBQztJQStEN0MsQ0FBQztJQTdEUSx1QkFBRyxHQUFWLFVBQVcsR0FBaUI7UUFDMUIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNaLEtBQUssT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hDLEtBQUssS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQzVCLFNBQVMsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBMkIsR0FBRyxNQUFHLENBQUMsQ0FBQztRQUNsRSxDQUFDO0lBQ0gsQ0FBQztJQUtNLHVCQUFHLEdBQVYsVUFBVyxHQUFpQixFQUFFLEtBQWE7UUFDekMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLElBQUEsZ0NBQTBELEVBQW5ELGFBQUssRUFBRSxXQUFHLENBQTBDO1lBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxPQUFPLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sQ0FBQztRQUNULENBQUM7UUFFRCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1osS0FBSyxPQUFPO2dCQUNWLElBQUksQ0FBQyxLQUFLO29CQUNSLEtBQUssS0FBSyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM3RCxLQUFLLENBQUM7WUFDUixLQUFLLEtBQUs7Z0JBQ1IsSUFBSSxDQUFDLEdBQUc7b0JBQ04sS0FBSyxLQUFLLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZELEtBQUssQ0FBQztZQUNSO2dCQUNFLE1BQU0sSUFBSSxTQUFTLENBQUMsNkJBQTJCLEdBQUcsTUFBRyxDQUFDLENBQUM7UUFDM0QsQ0FBQztJQUNILENBQUM7SUFFTSw0QkFBUSxHQUFmO1FBQ0UsSUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBRTlELElBQU0sR0FBRyxHQUNQLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUVwRCxNQUFNLENBQUMsS0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFLLENBQUM7SUFDM0MsQ0FBQztJQUVNLGlDQUFhLEdBQXBCO1FBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3BCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxrQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFHLENBQUM7UUFDakQsQ0FBQztRQUVELE1BQU0sQ0FBQyxpQkFBZSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUcsQ0FBQztJQUNsRCxDQUFDO0lBRU8sMEJBQU0sR0FBZCxVQUFlLElBQVM7UUFDdEIsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FyRUEsQUFxRUMsSUFBQTtBQXJFWSxpQkFBUyxZQXFFckIsQ0FBQSIsImZpbGUiOiJhcHAvc2hhcmVkL3V0aWxpdGllcy9kYXRlUmFuZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDdXJyZW50bHksIHRoaXMgc3R1ZmYgaXMgdXNlZCBvbmx5IGJ5IEZpbHRlckNvbXBvbmVudCwgYnV0IGl0IGNhbiBiZSBnZW5lcmljaXplZCBpZiBuZWVkZWQuXG5cbmV4cG9ydCB0eXBlIERhdGVSYW5nZUtleSA9ICdzdGFydCcgfCAnZW5kJztcblxuZXhwb3J0IGNsYXNzIERhdGVSYW5nZSB7XG4gIHB1YmxpYyBzdGFydDogc3RyaW5nID0gbnVsbDtcbiAgcHVibGljIGVuZDogc3RyaW5nID0gbnVsbDtcblxuICBwcml2YXRlIHJlYWRvbmx5IGJlZ2lubmluZ09mVGltZTogc3RyaW5nID0gJzEwMDAtMDEtMDEnO1xuICBwcml2YXRlIHJlYWRvbmx5IGVuZE9mVGltZTogc3RyaW5nID0gJzMwMDAtMDEtMDEnO1xuICBwcml2YXRlIHJlYWRvbmx5IGRlbGltaXRlcjogc3RyaW5nID0gJyAtICc7XG5cbiAgcHVibGljIGdldChrZXk6IERhdGVSYW5nZUtleSk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzogcmV0dXJuIHRoaXMuc3RhcnQ7XG4gICAgICBjYXNlICdlbmQnOiByZXR1cm4gdGhpcy5lbmQ7XG4gICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGRhdGUgcmFuZ2Uga2V5ICcke2tleX0nYCk7XG4gICAgfVxuICB9XG5cbiAgLy8gXCJ2YWx1ZVwiIGNhbiBiZSBhIHN0cmluZyBkYXRlIChhbnkgZm9ybWF0IHBhcnNlYWJsZSBieSBEYXRlIG9iamVjdCdzIGNvbnN0cnVjdG9yKVxuICAvLyBvciBhIHN0cmluZyByYW5nZSBvZiBkYXRlcyAoXCI8ZGF0ZT4gLSA8ZGF0ZT5cIikuXG4gIC8vIEVpdGhlciB3YXksIG9ubHkgdGhlIHBhcnQgb2YgdGhlIHJhbmdlIHNwZWNpZmllZCBieSBcImtleVwiIHdpbGwgYmUgc2V0LlxuICBwdWJsaWMgc2V0KGtleTogRGF0ZVJhbmdlS2V5LCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YodGhpcy5kZWxpbWl0ZXIpICE9PSAtMSkge1xuICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdOiBzdHJpbmdbXSA9IHZhbHVlLnNwbGl0KHRoaXMuZGVsaW1pdGVyKTtcbiAgICAgIHRoaXMuc2V0KGtleSwga2V5ID09PSAnc3RhcnQnID8gc3RhcnQgOiBlbmQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHRoaXMuc3RhcnQgPVxuICAgICAgICAgIHZhbHVlID09PSB0aGlzLmJlZ2lubmluZ09mVGltZSA/IG51bGwgOiB0aGlzLmZvcm1hdCh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgdGhpcy5lbmQgPVxuICAgICAgICAgIHZhbHVlID09PSB0aGlzLmVuZE9mVGltZSA/IG51bGwgOiB0aGlzLmZvcm1hdCh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkYXRlIHJhbmdlIGtleSAnJHtrZXl9J2ApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0YXJ0OiBzdHJpbmcgPVxuICAgICAgdGhpcy5zdGFydCA/IHRoaXMuZm9ybWF0KHRoaXMuc3RhcnQpIDogdGhpcy5iZWdpbm5pbmdPZlRpbWU7XG5cbiAgICBjb25zdCBlbmQ6IHN0cmluZyA9XG4gICAgICB0aGlzLmVuZCA/IHRoaXMuZm9ybWF0KHRoaXMuZW5kKSA6IHRoaXMuZW5kT2ZUaW1lO1xuXG4gICAgcmV0dXJuIGAke3N0YXJ0fSR7dGhpcy5kZWxpbWl0ZXJ9JHtlbmR9YDtcbiAgfVxuXG4gIHB1YmxpYyB0b0h1bWFuU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuc3RhcnQgJiYgdGhpcy5lbmQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0YXJ0ICYmICF0aGlzLmVuZCkge1xuICAgICAgcmV0dXJuICdBbnkgZGF0ZSc7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0YXJ0KSB7XG4gICAgICByZXR1cm4gYE9uIG9yIGJlZm9yZSAke3RoaXMuZm9ybWF0KHRoaXMuZW5kKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBgT24gb3IgYWZ0ZXIgJHt0aGlzLmZvcm1hdCh0aGlzLnN0YXJ0KX1gO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXQoZGF0ZTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSkudG9KU09OKCkuc2xpY2UoMCwgMTApO1xuICB9XG59XG4iXX0=
