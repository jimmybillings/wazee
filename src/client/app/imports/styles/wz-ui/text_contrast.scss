// from Brendan Saunders
// W3C discusses an algorithm to ensure a color is well contrasted against a background. 
// http://www.w3.org/WAI/ER/WD-AERT/#color-contrast
// same algorithm is used here
// for finding the difference between a given background color, and specified light, and dark values. 
// The mixin will use the light or dark value that has a greater difference form the background color.


$dark-text-color: rgba(black, 0.870588);
$light-text-color: rgba(white, 0.870588);

@mixin text-contrast($bg-color, $dark-text: $dark-text-color, $light-text: $light-text-color) {
	$color-brightness: round((red($bg-color) * 299) + (green($bg-color) * 587) + (blue($bg-color) * 114) / 1000);
	$light-text-brightness: round((red($light-text) * 299) + (green($light-text) * 587) + (blue($light-text) * 114) / 1000);
	$dark-text-brightness: round((red($dark-text) * 299) + (green($dark-text) * 587) + (blue($dark-text) * 114) / 1000);
	@if abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness) {
		color: $light-text;
	}
	@else {
		color: $dark-text;
	}
	content: "#{$bg-color}";
}

@function contrast-color($bg-color, $dark-text: $dark-text-color, $light-text: $light-text-color) {
	$color-brightness: round((red($bg-color) * 299) + (green($bg-color) * 587) + (blue($bg-color) * 114) / 1000);
	$light-text-brightness: round((red($light-text) * 299) + (green($light-text) * 587) + (blue($light-text) * 114) / 1000);
	$dark-text-brightness: round((red($dark-text) * 299) + (green($dark-text) * 587) + (blue($dark-text) * 114) / 1000);
	@if abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness) {
		@return $light-text;
	}
	@else {
		@return $dark-text;
	}
}


